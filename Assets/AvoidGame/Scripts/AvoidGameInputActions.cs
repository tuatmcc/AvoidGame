//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/AvoidGame/Scripts/AvoidGameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AvoidGameInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AvoidGameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AvoidGameInputActions"",
    ""maps"": [
        {
            ""name"": ""Calibration"",
            ""id"": ""4fb481cd-ffd8-4666-baae-f69e6aedc344"",
            ""actions"": [
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""1dcd4a00-dd8f-4e5f-b767-54cf079ac713"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""f47da66e-e3d1-48fc-8910-6100bc370bcd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ec6e8dec-96f5-41b6-8c4b-db51a715d773"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b617e928-70be-4e72-b5a7-504493cde547"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Global"",
            ""id"": ""131f4737-4a60-42da-950f-8838384ca08d"",
            ""actions"": [
                {
                    ""name"": ""ForceExit"",
                    ""type"": ""Button"",
                    ""id"": ""f7edc963-c3e2-49a7-8394-f85df3f05bc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b41781cd-ed0a-40e2-868c-d0b816c75c52"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceExit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92f2b4ae-fb80-49f5-a377-48c1eb91c1b4"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceExit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Calibration
        m_Calibration = asset.FindActionMap("Calibration", throwIfNotFound: true);
        m_Calibration_Submit = m_Calibration.FindAction("Submit", throwIfNotFound: true);
        m_Calibration_Next = m_Calibration.FindAction("Next", throwIfNotFound: true);
        // Global
        m_Global = asset.FindActionMap("Global", throwIfNotFound: true);
        m_Global_ForceExit = m_Global.FindAction("ForceExit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Calibration
    private readonly InputActionMap m_Calibration;
    private List<ICalibrationActions> m_CalibrationActionsCallbackInterfaces = new List<ICalibrationActions>();
    private readonly InputAction m_Calibration_Submit;
    private readonly InputAction m_Calibration_Next;
    public struct CalibrationActions
    {
        private @AvoidGameInputActions m_Wrapper;
        public CalibrationActions(@AvoidGameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Submit => m_Wrapper.m_Calibration_Submit;
        public InputAction @Next => m_Wrapper.m_Calibration_Next;
        public InputActionMap Get() { return m_Wrapper.m_Calibration; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CalibrationActions set) { return set.Get(); }
        public void AddCallbacks(ICalibrationActions instance)
        {
            if (instance == null || m_Wrapper.m_CalibrationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CalibrationActionsCallbackInterfaces.Add(instance);
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
            @Next.started += instance.OnNext;
            @Next.performed += instance.OnNext;
            @Next.canceled += instance.OnNext;
        }

        private void UnregisterCallbacks(ICalibrationActions instance)
        {
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
            @Next.started -= instance.OnNext;
            @Next.performed -= instance.OnNext;
            @Next.canceled -= instance.OnNext;
        }

        public void RemoveCallbacks(ICalibrationActions instance)
        {
            if (m_Wrapper.m_CalibrationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICalibrationActions instance)
        {
            foreach (var item in m_Wrapper.m_CalibrationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CalibrationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CalibrationActions @Calibration => new CalibrationActions(this);

    // Global
    private readonly InputActionMap m_Global;
    private List<IGlobalActions> m_GlobalActionsCallbackInterfaces = new List<IGlobalActions>();
    private readonly InputAction m_Global_ForceExit;
    public struct GlobalActions
    {
        private @AvoidGameInputActions m_Wrapper;
        public GlobalActions(@AvoidGameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ForceExit => m_Wrapper.m_Global_ForceExit;
        public InputActionMap Get() { return m_Wrapper.m_Global; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalActions set) { return set.Get(); }
        public void AddCallbacks(IGlobalActions instance)
        {
            if (instance == null || m_Wrapper.m_GlobalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GlobalActionsCallbackInterfaces.Add(instance);
            @ForceExit.started += instance.OnForceExit;
            @ForceExit.performed += instance.OnForceExit;
            @ForceExit.canceled += instance.OnForceExit;
        }

        private void UnregisterCallbacks(IGlobalActions instance)
        {
            @ForceExit.started -= instance.OnForceExit;
            @ForceExit.performed -= instance.OnForceExit;
            @ForceExit.canceled -= instance.OnForceExit;
        }

        public void RemoveCallbacks(IGlobalActions instance)
        {
            if (m_Wrapper.m_GlobalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGlobalActions instance)
        {
            foreach (var item in m_Wrapper.m_GlobalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GlobalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GlobalActions @Global => new GlobalActions(this);
    public interface ICalibrationActions
    {
        void OnSubmit(InputAction.CallbackContext context);
        void OnNext(InputAction.CallbackContext context);
    }
    public interface IGlobalActions
    {
        void OnForceExit(InputAction.CallbackContext context);
    }
}
